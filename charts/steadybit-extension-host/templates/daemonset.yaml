apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "extensionlib.names.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- range $key, $value := .Values.extraLabels }}
      {{ $key }}: {{ $value }}
    {{- end }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "extensionlib.names.name" . }}
      app: {{ include "extensionlib.names.name" . }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "extensionlib.names.name" . }}
        app: {{ include "extensionlib.names.name" . }}
        steadybit.com/extension: "true"
      annotations:
        "container.apparmor.security.beta.kubernetes.io/{{ include "extensionlib.names.name" . }}": "unconfined"
        "steadybit.com/extension-auto-discovery": >
          {
            "extensions": [
              {
                "port": "8085",
                "types": {{ toJson .Values.types }},
                "tls": {
                    {{- if .Values.tls.server.certificate.fromSecret }}
                  "server": {
                    "extraCertsFile": "/opt/steadybit/agent/etc/extension-mtls/{{ .Values.tls.server.certificate.fromSecret }}/tls.crt"
                    {{ if .Values.tls.client.certificates.fromSecrets -}}
                  },
                    {{- else -}}
                }
                    {{- end -}}
                    {{- end }}
                    {{ if .Values.tls.client.certificates.fromSecrets -}}
                  "client": {
                    "certChainFile": "/opt/steadybit/agent/etc/extension-mtls/{{ first .Values.tls.client.certificates.fromSecrets }}/tls.crt",
                    "certKeyFile": "/opt/steadybit/agent/etc/extension-mtls/{{ first .Values.tls.client.certificates.fromSecrets }}/tls.key"
                  }
                    {{- end }}
              }
              }
            ]
          }
    spec:
      hostNetwork: true
      hostPID: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
        - image: {{ .Values.image.name }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          name: {{ include "extensionlib.names.name" . }}
          env:
                  {{- include "extensionlib.deployment.env" (list .) | nindent 12 }}
          volumeMounts:
            - name: tmp-dir
              mountPath: /tmp
                  {{- include "extensionlib.deployment.volumeMounts" (list .) | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: 8081
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: 8081
          securityContext:
            seccompProfile:
              type: "Unconfined"
            capabilities:
              add: [ "SYS_ADMIN", "SYS_RESOURCE", "SYS_BOOT",  "NET_RAW",  "SYS_TIME", "SYS_PTRACE", "KILL", "NET_ADMIN", "DAC_OVERRIDE", "SETUID", "SETGID", "AUDIT_WRITE" ]
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10000
            runAsGroup: 10000
      volumes:
        - name: tmp-dir
          emptyDir: { }
            {{- include "extensionlib.deployment.volumes" (list .) | nindent 8 }}
          {{- with .Values.nodeSelector }}
      nodeSelector:
          {{- toYaml . | nindent 8 }}
          {{- end }}
          {{- with .Values.affinity }}
      affinity:
          {{- toYaml . | nindent 8 }}
          {{- end }}
          {{- with .Values.tolerations }}
      tolerations:
          {{- toYaml . | nindent 8 }}
          {{- end }}
          {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
          {{- toYaml . | nindent 8 }}
          {{- end }}

